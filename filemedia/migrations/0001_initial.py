# Generated by Django 5.0 on 2024-10-25 12:34

import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('unique_name', models.CharField(max_length=255, verbose_name='Unique Name')),
                ('size', models.CharField(max_length=255, verbose_name='Size')),
                ('path', models.TextField(blank=True, verbose_name='Path')),
                ('file', models.FileField(blank=True, max_length=255, upload_to='', verbose_name='File')),
                ('type', models.CharField(blank=True, choices=[('p', 'Pictures'), ('f', 'Files'), ('v', 'Video')], max_length=1, verbose_name='Type')),
                ('file_type', models.CharField(max_length=50, verbose_name='File type')),
                ('favored', models.BooleanField(default=False, verbose_name='Favored')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'media',
                'verbose_name_plural': 'media',
                'db_table': 'ant_media',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
            ],
            options={
                'verbose_name': 'file',
                'verbose_name_plural': 'files',
                'permissions': (('get_file_ajax', 'Can get file (ajax)'), ('change_file_ajax', 'Can change upload file (ajax)'), ('upload_file_ajax', 'Can upload file (ajax)'), ('download_file', 'Can download file')),
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('filemedia.media',),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
            ],
            options={
                'verbose_name': 'picture',
                'verbose_name_plural': 'pictures',
                'permissions': (('get_image_ajax', 'Can get image (ajax)'), ('change_image_ajax', 'Can change upload image (ajax)'), ('upload_image_ajax', 'Can upload image (ajax)'), ('delete_image_ajax', 'Can delete image (ajax)'), ('download_image', 'Can download image')),
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('filemedia.media',),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
            ],
            options={
                'verbose_name': 'video',
                'verbose_name_plural': 'videos',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('filemedia.media',),
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('slug', models.SlugField(help_text='A short label, generally used in URLs.', max_length=35, null=True, verbose_name='Slug')),
                ('status', models.BooleanField(default=True, help_text='Status is checked will be published.', max_length=1, verbose_name='Status')),
                ('type', models.CharField(choices=[('p', 'Picture'), ('f', 'File'), ('v', 'Video')], max_length=1, verbose_name='Type')),
                ('description', models.TextField(blank=True, max_length=255, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('mptt_level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ant_tags_children', to='filemedia.tags', verbose_name='Parent')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'tags',
                'verbose_name_plural': 'tags',
                'db_table': 'ant_media_tags',
            },
        ),
        migrations.CreateModel(
            name='Mediahastags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership', to='filemedia.media')),
                ('tags', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership', to='filemedia.tags')),
            ],
        ),
        migrations.AddField(
            model_name='media',
            name='relationships',
            field=models.ManyToManyField(blank=True, to='filemedia.tags', verbose_name='Tags'),
        ),
    ]
